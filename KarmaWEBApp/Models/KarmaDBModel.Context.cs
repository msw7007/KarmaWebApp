//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KarmaWEBApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KarmaDBEntities : DbContext
    {
        public KarmaDBEntities()
            : base("name=KarmaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<absentdata> absentdata { get; set; }
        public virtual DbSet<attendance_list> attendance_list { get; set; }
        public virtual DbSet<chartable> chartable { get; set; }
        public virtual DbSet<class_list> class_list { get; set; }
        public virtual DbSet<playerdata> playerdata { get; set; }
        public virtual DbSet<raiddates> raiddates { get; set; }
        public virtual DbSet<raiddatetable> raiddatetable { get; set; }
        public virtual DbSet<roles_list> roles_list { get; set; }
        public virtual DbSet<settingstable> settingstable { get; set; }
        public virtual DbSet<user> user { get; set; }
    
        public virtual int AbsentInsert(Nullable<int> inputPlayerID, Nullable<System.DateTime> date1, Nullable<System.DateTime> date2, string reason)
        {
            var inputPlayerIDParameter = inputPlayerID.HasValue ?
                new ObjectParameter("InputPlayerID", inputPlayerID) :
                new ObjectParameter("InputPlayerID", typeof(int));
    
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AbsentInsert", inputPlayerIDParameter, date1Parameter, date2Parameter, reasonParameter);
        }
    
        public virtual int CharActive(Nullable<int> inputPlayerID, Nullable<sbyte> inputActivator)
        {
            var inputPlayerIDParameter = inputPlayerID.HasValue ?
                new ObjectParameter("InputPlayerID", inputPlayerID) :
                new ObjectParameter("InputPlayerID", typeof(int));
    
            var inputActivatorParameter = inputActivator.HasValue ?
                new ObjectParameter("InputActivator", inputActivator) :
                new ObjectParameter("InputActivator", typeof(sbyte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CharActive", inputPlayerIDParameter, inputActivatorParameter);
        }
    
        public virtual int CharInsert(string inputNickname, string inputPlayerID, string inputCharRole, string inputCharClass)
        {
            var inputNicknameParameter = inputNickname != null ?
                new ObjectParameter("InputNickname", inputNickname) :
                new ObjectParameter("InputNickname", typeof(string));
    
            var inputPlayerIDParameter = inputPlayerID != null ?
                new ObjectParameter("InputPlayerID", inputPlayerID) :
                new ObjectParameter("InputPlayerID", typeof(string));
    
            var inputCharRoleParameter = inputCharRole != null ?
                new ObjectParameter("InputCharRole", inputCharRole) :
                new ObjectParameter("InputCharRole", typeof(string));
    
            var inputCharClassParameter = inputCharClass != null ?
                new ObjectParameter("InputCharClass", inputCharClass) :
                new ObjectParameter("InputCharClass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CharInsert", inputNicknameParameter, inputPlayerIDParameter, inputCharRoleParameter, inputCharClassParameter);
        }
    
        public virtual int NewRaidData(Nullable<System.DateTime> inputDate)
        {
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("InputDate", inputDate) :
                new ObjectParameter("InputDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewRaidData", inputDateParameter);
        }
    }
}
